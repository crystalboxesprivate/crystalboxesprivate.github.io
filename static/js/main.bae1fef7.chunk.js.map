{"version":3,"sources":["hooks.ts","state.ts","psd-interface.ts","file-loading.ts","ImageView.tsx","Spectrum.tsx","LayerList.tsx","Header.tsx","App.tsx","default/serviceWorker.js","index.js"],"names":["useWindowSize","isClient","window","getSize","width","innerWidth","undefined","height","innerHeight","useState","windowSize","setWindowSize","useEffect","addEventListener","handleResize","removeEventListener","mergedImage","combineReducers","isLoading","state","action","type","imageData","rootReducer","filename","importData","data","layerMaskSection","section","currentLayer","layerId","fileIndex","layers","map","layer","index","layerImage","layerInfo","layersToLoad","StateActions","createPsdFile","byteData","psd_createPsdFile","parseLayerMaskSection","document","file","psd_parseLayerMaskSection","getDocumentInfo","psd_getDocumentInfo","_jsObject","createDocument","psd_createDocument","getLayerCount","psd_getLayerCount","getLayer","psd_getLayer","getLayerInfo","psd_getLayerInfo","createInterleavedImage","onComplete","psd_createInterleavedImage","getMergedImageFromImageDataSection","psd_getMergedImageFromImageDataSection","loadDocumentIntoReduxState","dispatch","validatePsdFile","name","blob","a","Promise","resolve","reject","arrayBuffer","then","value","Uint8Array","documentInfo","loadExternalPsdBlob","path","xhr","XMLHttpRequest","open","responseType","onload","e","this","status","response","send","extractLayers","layerCount","x","info","console","time","timeEnd","ImageData","Uint8ClampedArray","log","Error","u8data","psdData","CanvasView","useSelector","imageWidth","imageHeight","scale","Math","min","canvas","useRef","windowHeight","panZoom","ctx","current","getContext","putImageData","autoCenter","ref","alignContent","justifyContent","alignItems","backgroundColor","id","ImageView","useDropzone","noClick","noKeyboard","acceptedFiles","getRootProps","getInputProps","currentFileBlob","length","currentFilename","isOpen","setIsOpen","lastError","setLastError","useDispatch","progress","catch","reason","position","flex","zIndex","top","left","overflow","isNaN","size","aria-label","isIndeterminate","label","floor","className","style","dropZoneStyle","title","variant","primaryActionLabel","onPrimaryAction","TooltipDirection","TooltipStyle","display","outline","ListBoxItem","selected","selectedKeys","selectionMode","onSelectionChange","keys","k","Array","from","key","LayerList","z","idx","reverse","hashCode","LayerListSection","LayoutBar","Code","children","Filename","SaveLayerButton","getElementById","currentLayerName","_","aria-labelledby","isDisabled","onPress","toBlob","saveAs","isQuiet","AppHeader","paddingStart","paddingEnd","direction","alignSelf","LayerMetadata","meta","channelCount","bitsPerChannel","colorMode","v","color","toLowerCase","paddingTop","useFileLoadingState","loadDefaultSample","loadLayerMaskSection","errors","loadMergedImage","err","Layout","marginTop","marginBottom","orientation","App","store","createStore","colorScheme","theme","defaultTheme","Boolean","location","hostname","match","documentElement","classList","add","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.bae1fef7.chunk.js","sourcesContent":["import { useState, useEffect } from 'react'\n\n// Hook\nexport function useWindowSize() {\n  const isClient = typeof window === 'object'\n\n  function getSize() {\n    return {\n      width: isClient ? window.innerWidth : undefined,\n      height: isClient ? window.innerHeight : undefined,\n    }\n  }\n\n  const [windowSize, setWindowSize] = useState(getSize)\n\n  useEffect(() => {\n    if (!isClient) {\n      return\n    }\n\n    function handleResize() {\n      setWindowSize(getSize())\n    }\n\n    window.addEventListener('resize', handleResize)\n    return () => window.removeEventListener('resize', handleResize)\n  }, []) // Empty array ensures that effect is only run on mount and unmount\n\n  return windowSize\n}\n","import { combineReducers } from 'redux'\n\nconst SET_FILENAME = 'SET_FILENAME'\nconst SET_IMPORT_DATA = 'SET_IMPORT_DATA'\nconst SET_CURRENT_LAYER = 'SET_CURRENT_LAYER'\nconst UPDATE_FILE_INDEX = 'UPDATE_FILE_INDEX'\nconst DUMP_LAYERS = 'DUMP_LAYERS'\nconst SET_LAYER_MASK_SECTION = 'SET_LAYER_MASK_SECTION'\nconst ADD_LAYER_INFO = 'ADD_LAYER_INFO'\nconst SET_LAYER_IMAGE_DATA = 'SET_LAYER_IMAGE_DATA'\nconst SET_IS_LAYER_LOADING = 'SET_IS_LAYER_LOADING'\nconst ADD_LAYERS_TO_LOAD = 'SET_LAYERS_TO_LOAD'\n\nconst layersToLoad = (state = 0, action: any) =>\n  action.type === ADD_LAYERS_TO_LOAD ? state + action.layersToLoad : state\n\nconst filename = (state = '', action: any) =>\n  action.type === SET_FILENAME ? action.filename : state\n\nconst importData = (state: null | PsdImportData = null, action: any) => {\n  switch (action.type) {\n    case SET_IMPORT_DATA:\n      return action.data\n    case SET_LAYER_MASK_SECTION: {\n      if (state == null) {\n        return state\n      } else {\n        return { ...state, layerMaskSection: action.section }\n      }\n    }\n    default:\n      return state\n  }\n}\n\nconst currentLayer = (state = 0, action: any) =>\n  action.type === SET_CURRENT_LAYER ? action.layerId : state\n\nconst fileIndex = (state = 0, action: any) =>\n  action.type === UPDATE_FILE_INDEX ? state + 1 : state\n\nconst layers = (state: Layer[] = [], action: any) => {\n  switch (action.type) {\n    case DUMP_LAYERS:\n      return []\n    case SET_IS_LAYER_LOADING:\n      return state.map((layer, index) =>\n        index === action.index\n          ? { ...layer, isLoading: action.isLoading }\n          : layer\n      )\n    case SET_LAYER_IMAGE_DATA:\n      return state.map((layer, index) =>\n        index === action.index\n          ? { ...layer, layerImage: action.imageData }\n          : layer\n      )\n    case ADD_LAYER_INFO:\n      return [...state, action.layerInfo]\n    default:\n      return state\n  }\n}\n\nexport type Layer = {\n  name: string\n  opacity: number\n  layerImage: null | ImageData\n  mask: null | ImageData\n  hashCode: number\n\n  isLoading: boolean\n}\n\nconst SET_MERGED_IS_LOADING = 'SET_MERGED_IS_LOADING'\nconst SED_MERGED_IMAGE_DATA = 'SED_MERGED_IMAGE_DATA'\n\nconst isLoading = (state = false, action: any) =>\n  action.type === SET_MERGED_IS_LOADING ? action.isLoading : state\nconst imageData = (state = null, action: any) =>\n  action.type === SED_MERGED_IMAGE_DATA ? action.imageData : state\n\nconst mergedImage = combineReducers({\n  isLoading,\n  imageData,\n})\n\nexport const rootReducer = combineReducers({\n  filename,\n  importData,\n  currentLayer,\n  fileIndex,\n  layers,\n  layersToLoad,\n  mergedImage,\n})\n\nexport type DocumentInfo = {\n  width: number\n  height: number\n  channelCount: number\n  bitsPerChannel: number\n  colorMode: number\n}\n\nexport type AppState = {\n  filename: string\n  importData: PsdImportData\n  currentLayer: number\n  fileIndex: number\n  layers: Layer[]\n  layersToLoad: number\n\n  mergedImage: { isLoading: boolean; imageData: ImageData | null }\n}\n\nexport type PsdImportData = {\n  document: any\n  file: any\n  layerMaskSection: any\n  documentInfo: DocumentInfo\n}\n\nexport const StateActions = {\n  setMergedImageData(imageData: ImageData | null) {\n    return { type: SED_MERGED_IMAGE_DATA, imageData }\n  },\n  setMergedImageIsLoading(isLoading: any) {\n    return { type: SET_MERGED_IS_LOADING, isLoading }\n  },\n  addLayersToLoad: (layersToLoad: number) => ({\n    type: ADD_LAYERS_TO_LOAD,\n    layersToLoad,\n  }),\n  setIsLayerloading(isLoading: boolean, index: number) {\n    return { type: SET_IS_LAYER_LOADING, isLoading, index }\n  },\n  setFilename: (filename: string) => ({\n    type: SET_FILENAME,\n    filename: filename,\n  }),\n  setImportData: (data: PsdImportData) => ({\n    type: SET_IMPORT_DATA,\n    data,\n  }),\n  setCurrentLayer: (layerId: number) => ({ type: SET_CURRENT_LAYER, layerId }),\n  updateFileIndex: () => ({ type: UPDATE_FILE_INDEX }),\n  dumpLayers() {\n    return { type: DUMP_LAYERS }\n  },\n  setLayerMaskSection: (section: any) => ({\n    type: SET_LAYER_MASK_SECTION,\n    section,\n  }),\n  addLayerInfo: (layerInfo: Layer) => ({\n    type: ADD_LAYER_INFO,\n    layerInfo,\n  }),\n  setLayerImageData: (imageData: ImageData, index: number) => ({\n    type: SET_LAYER_IMAGE_DATA,\n    imageData,\n    index,\n  }),\n}\n","import { Layer, DocumentInfo } from './state'\n\nexport function createPsdFile(byteData: Uint8Array): any {\n  // @ts-ignore\n  return window.psd_createPsdFile(byteData)\n}\n\nexport function parseLayerMaskSection(document: any, file: any): any {\n  // @ts-ignore\n  return window.psd_parseLayerMaskSection(document, file)\n}\n\nexport function getDocumentInfo(document: any): DocumentInfo {\n  // @ts-ignore\n  return window.psd_getDocumentInfo(document)._jsObject\n}\n\nexport function createDocument(file: any): any {\n  // @ts-ignore\n  return window.psd_createDocument(file)\n}\n\nexport function getLayerCount(layerMaskSection: any): any {\n  // @ts-ignore\n  return window.psd_getLayerCount(layerMaskSection)\n}\n\nexport function getLayer(layerMaskSection: any, index: number): any {\n  // @ts-ignore\n  return window.psd_getLayer(layerMaskSection, index)\n}\n\nexport function getLayerInfo(layer: any): Layer {\n  // @ts-ignore\n  return window.psd_getLayerInfo(layer)._jsObject\n}\n\nexport function extractLayer(document: any, file: any, layer: any): Layer {\n  // @ts-ignore\n  return window.psd_extractLayer(document, file, layer)\n}\n\nexport function createInterleavedImage(\n  document: any,\n  file: any,\n  layer: any,\n  onComplete: (data: any) => void\n): Array<number> {\n  // @ts-ignore\n  return window.psd_createInterleavedImage(document, file, layer, onComplete)\n}\n\nexport function getMergedImageFromImageDataSection(\n  document: any,\n  file: any,\n  onComplete: (data: any) => void\n): Array<number> {\n  // @ts-ignore\n  return window.psd_getMergedImageFromImageDataSection(\n    document,\n    file,\n    onComplete\n  )\n}\n","import { PsdImportData, StateActions } from './state'\nimport {\n  createPsdFile,\n  createDocument,\n  getDocumentInfo,\n  parseLayerMaskSection,\n  getLayerCount,\n  getLayer,\n  getLayerInfo,\n  createInterleavedImage,\n  getMergedImageFromImageDataSection,\n} from './psd-interface'\nimport { createStore, Dispatch } from 'redux'\n\nexport function loadDocumentIntoReduxState(\n  dispatch: any,\n  filename: string,\n  importData: PsdImportData\n) {\n  dispatch(StateActions.setImportData(importData))\n  dispatch(StateActions.setFilename(filename))\n  dispatch(StateActions.setCurrentLayer(0))\n  dispatch(StateActions.updateFileIndex())\n}\n\nexport async function validatePsdFile(\n  name: string,\n  blob: Blob\n): Promise<PsdImportData> {\n  return new Promise((resolve, reject) => {\n    blob.arrayBuffer().then((value) => {\n      const file = createPsdFile(new Uint8Array(value))\n      const document = createDocument(file)\n      if (!document) {\n        reject('Invalid PSD file')\n      }\n      const documentInfo = getDocumentInfo(document)\n\n      // check if psd file ?\n      resolve({\n        document,\n        file,\n        layerMaskSection: null,\n        documentInfo,\n      })\n    })\n  })\n}\nexport async function loadExternalPsdBlob(path: string): Promise<Blob> {\n  return new Promise((resolve, reject) => {\n    var xhr = new XMLHttpRequest()\n    xhr.open('GET', path, true)\n    xhr.responseType = 'blob'\n    xhr.onload = function (e) {\n      if (this.status === 200) {\n        // get binary data as a response\n        resolve(this.response)\n      } else {\n        reject(`Couldn't load the file`)\n      }\n    }\n    try {\n      xhr.send()\n    } catch (e) {\n      reject(e)\n    }\n  })\n}\n\nasync function extractLayers(\n  dispatch: Dispatch<any>,\n  importData: PsdImportData,\n  layerCount: number,\n  layerMaskSection: any\n) {\n  // const errors = []\n  // get layer info\n  dispatch(StateActions.addLayersToLoad(layerCount))\n  for (let x = 0; x < layerCount; x++) {\n    const layer = getLayer(layerMaskSection, x)\n    const info = getLayerInfo(layer)\n\n    console.time(`Interleave layer \"${info.name}\" (${x})`)\n    // image\n    createInterleavedImage(\n      importData.document,\n      importData.file,\n      layer,\n      (data) => {\n        console.timeEnd(`Interleave layer \"${info.name}\" (${x})`)\n        if (data == null) {\n          // errors.push(`[${x}] : Couldn't extract image.`)\n        } else {\n          dispatch(\n            StateActions.setLayerImageData(\n              new ImageData(\n                new Uint8ClampedArray(data),\n                importData.documentInfo.width,\n                importData.documentInfo.height\n              ),\n              x\n            )\n          )\n        }\n        dispatch(StateActions.setIsLayerloading(false, x))\n        dispatch(StateActions.addLayersToLoad(-1))\n      }\n    )\n\n    // TODO extract mask\n  }\n}\n\nexport async function loadLayerMaskSection(\n  importData: PsdImportData,\n  dispatch: Dispatch<any>\n) {\n  console.log('load layer mask section')\n  const layerMaskSection = parseLayerMaskSection(\n    importData.document,\n    importData.file\n  )\n\n  if (!layerMaskSection) {\n    throw Error(`Couldn't parse the layer mask section`)\n  }\n  const layerCount = getLayerCount(layerMaskSection)\n  // first pass is to update redux state of layers\n  for (let x = 0; x < layerCount; x++) {\n    const layer = getLayer(layerMaskSection, x)\n    const info = getLayerInfo(layer)\n    info.isLoading = true\n    dispatch(StateActions.addLayerInfo(info))\n  }\n\n  extractLayers(dispatch, importData, layerCount, layerMaskSection)\n\n  return layerMaskSection\n}\n\nexport async function loadMergedImage(\n  importData: PsdImportData,\n  dispatch: Dispatch<any>\n) {\n  dispatch(StateActions.setMergedImageIsLoading(true))\n  dispatch(StateActions.setMergedImageData(null))\n  console.time(`Parse image data`)\n\n  getMergedImageFromImageDataSection(\n    importData.document,\n    importData.file,\n    (u8data) => {\n      console.timeEnd(`Parse image data`)\n      if (u8data) {\n        dispatch(\n          StateActions.setMergedImageData(\n            new ImageData(\n              new Uint8ClampedArray(u8data),\n              importData.documentInfo.width,\n              importData.documentInfo.height\n            )\n          )\n        )\n      }\n      dispatch(StateActions.setMergedImageIsLoading(false))\n    }\n  )\n}\n\nexport async function loadDefaultSample() {\n  const filename = 'sample.psd'\n  const blob = await loadExternalPsdBlob(filename)\n  const psdData = await validatePsdFile(filename, blob)\n  return psdData\n}\n","import React, {\n  useEffect,\n  useState,\n  useRef,\n  RefObject,\n  useLayoutEffect,\n} from 'react'\nimport { useWindowSize } from './hooks'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useDropzone } from 'react-dropzone'\nimport {\n  Flex,\n  View,\n  ProgressCircle,\n  DialogTrigger,\n  AlertDialog,\n  IllustratedMessage,\n  Heading,\n  Content,\n  ProgressBar,\n} from '@adobe/react-spectrum'\nimport NotFound from '@spectrum-icons/illustrations/NotFound'\n\n//@ts-ignore\nimport { PanZoom } from 'react-easy-panzoom'\nimport { AppState } from './state'\nimport { validatePsdFile, loadDocumentIntoReduxState } from './file-loading'\n\nexport const imageViewId = 'image-view'\n\nfunction CanvasView({ currentLayer }: { currentLayer: number }) {\n  const { imageWidth, imageHeight } = useSelector((state: AppState) => ({\n    imageWidth: state.importData.documentInfo.width,\n    imageHeight: state.importData.documentInfo.height,\n  }))\n\n  const { width, height } = useWindowSize()\n\n  let scale =\n    width && height ? Math.min(width / imageWidth, height / imageHeight) : 1.0\n\n  const imageData = useSelector((state: AppState) =>\n    currentLayer === -1\n      ? (state.mergedImage.imageData as ImageData)\n      : (state.layers[currentLayer].layerImage as ImageData)\n  )\n\n  const canvas: React.MutableRefObject<null | HTMLCanvasElement> = useRef(null)\n  const { height: windowHeight } = useWindowSize()\n  const panZoom = useRef()\n\n  // canvass size is\n  useEffect(() => {\n    const ctx = canvas.current?.getContext('2d')\n    ctx?.scale(1.0, 1.0)\n    ctx?.putImageData(imageData, 0, 0)\n    ctx?.scale(1 / 1.0, 1 / 1.0)\n  })\n\n  useEffect(() => {\n    if (scale < 1.0) {\n      //@ts-ignore\n      panZoom.current.autoCenter(scale)\n    }\n  }, [])\n\n  // draw canvas here with an image\n  return (\n    <PanZoom ref={panZoom}>\n      <Flex\n        alignContent=\"center\"\n        height={windowHeight}\n        justifyContent=\"center\"\n        alignItems=\"center\"\n      >\n        <View backgroundColor=\"static-white\">\n          <canvas\n            ref={canvas}\n            id={imageViewId}\n            width={1.0 * imageWidth}\n            height={1.0 * imageHeight}\n          />\n        </View>\n\n        {/* \n      <img\n        draggable={false}\n        alt=\"My flickr thingy\"\n        src=\"https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png\"\n      ></img>\n      <p>Drag 'n' drop some files here, or click to select files</p> \n     */}\n      </Flex>\n    </PanZoom>\n  )\n}\n\nexport function ImageView() {\n  const windowSize = useWindowSize()\n  const { acceptedFiles, getRootProps, getInputProps } = useDropzone({\n    noClick: true,\n    noKeyboard: true,\n  })\n  const currentFileBlob = acceptedFiles.length !== 0 ? acceptedFiles[0] : null\n  const currentFilename = currentFileBlob ? currentFileBlob.name : ''\n  const [isOpen, setIsOpen] = useState(false)\n  const [lastError, setLastError] = useState('')\n  const dispatch = useDispatch()\n\n  const currentLayer = useSelector((state: AppState) => state.currentLayer)\n  const isLoading = useSelector((state: AppState) =>\n    currentLayer === -1\n      ? state.mergedImage.isLoading\n      : state.layers?.length > 0\n      ? state.layers[currentLayer].isLoading\n      : true\n  )\n  const progress = useSelector(\n    (state: AppState) => state.layersToLoad / state.layers?.length\n  )\n  const imageData = useSelector((state: AppState) =>\n    currentLayer === -1\n      ? state.mergedImage.imageData\n      : state.layers?.length > 0\n      ? state.layers[currentLayer].layerImage\n      : null\n  )\n\n  useEffect(() => {\n    if (currentFileBlob != null) {\n      validatePsdFile(currentFileBlob?.name, currentFileBlob)\n        .then((value: any) => {\n          loadDocumentIntoReduxState(dispatch, currentFilename, value)\n        })\n        .catch((reason: any) => {\n          // show error\n          setLastError(reason)\n          setIsOpen(true)\n        })\n    }\n  }, [currentFilename])\n\n  return (\n    <View height={windowSize.height} position=\"relative\" flex>\n      {imageData == null ? (\n        <View\n          zIndex={0}\n          position=\"absolute\"\n          top={0}\n          left={0}\n          width=\"100%\"\n          height=\"100%\"\n          overflow=\"hidden\"\n        >\n          <Flex\n            alignContent=\"center\"\n            height={windowSize.height}\n            justifyContent=\"center\"\n            alignItems=\"center\"\n          >\n            {isLoading ? (\n              isNaN(progress) || progress > 0.99 ? (\n                <ProgressCircle\n                  size=\"L\"\n                  aria-label=\"Loading…\"\n                  isIndeterminate\n                />\n              ) : (\n                <ProgressBar\n                  size=\"L\"\n                  label=\"Extracting layers…\"\n                  value={Math.floor((1 - progress) * 100)}\n                />\n              )\n            ) : (\n              <IllustratedMessage>\n                <NotFound />\n                <Heading>Couldn't extract this layer</Heading>\n                {/* <Content>Try another search</Content> */}\n              </IllustratedMessage>\n            )}\n          </Flex>\n        </View>\n      ) : null}\n      <div {...getRootProps({ className: 'dropzone' })} style={dropZoneStyle}>\n        <input {...getInputProps()} />\n        {imageData != null ? <CanvasView currentLayer={currentLayer} /> : null}\n      </div>\n      <DialogTrigger isOpen={isOpen}>\n        <></>\n        <AlertDialog\n          title=\"PSD Import\"\n          variant=\"error\"\n          primaryActionLabel=\"Confirm\"\n          onPrimaryAction={() => setIsOpen(false)}\n        >\n          {lastError}\n        </AlertDialog>\n      </DialogTrigger>\n    </View>\n  )\n}\n\nconst dropZoneStyle: React.CSSProperties = {\n  position: 'absolute',\n  top: 0,\n  left: 0,\n  width: '100%',\n  height: '100%',\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n  zIndex: 1,\n  outline: 'none',\n}\n","import React, { useEffect, useState, useRef } from 'react'\nexport function Detail({\n  children,\n  size,\n  isLight,\n}: {\n  isLight?: boolean\n  size?: string\n  children: string\n}) {\n  size = size || 'M'\n  //@ts-ignore\n  // const elems = React.createElement(Section, { title: children })\n  // return <ListBox>{elems as any}</ListBox>\n  return (\n    <p className={`spectrum spectrum-Detail spectrum-Detail--${size}`}>\n      {isLight ? (\n        <span className=\"spectrum-Detail--light\">{children}</span>\n      ) : (\n        children\n      )}\n    </p>\n  )\n}\n\nexport function Code({ children, size }: { children: any; size?: string }) {\n  return (\n    <code className={`spectrum-Code spectrum-Code--${size || 'S'}`}>\n      {children}\n    </code>\n  )\n}\n\nexport function ToCssColorType(color: string) {\n  const type = 'default'\n  return `var(--spectrum-global-color-${color}, var(--spectrum-semantic-${color}-color-${type}))`\n}\n\nexport enum TooltipDirection {\n  Top = 'top',\n  Left = 'left',\n  Right = 'right',\n  Bottom = 'bottom',\n}\n\nexport enum TooltipStyle {\n  Informative = 'info',\n  Positive = 'positive',\n  Negative = 'negative',\n}\n\ntype TooltipProps = {\n  children: string\n  direction?: TooltipDirection\n  style?: TooltipStyle\n  isOpen?: boolean\n}\n\nexport function Tooltip({ children, direction, style, isOpen }: TooltipProps) {\n  let classList = 'spectrum-Tooltip'\n  if (style) {\n    classList += ` spectrum-Tooltip--${style}`\n  }\n\n  if (direction) {\n    classList += ` spectrum-Tooltip--${direction}`\n  }\n\n  if (isOpen) {\n    classList += ` is-open`\n  }\n\n  return (\n    <span className={classList}>\n      <span className=\"spectrum-Tooltip-label\">{children}</span>\n      <span className=\"spectrum-Tooltip-tip\"></span>\n    </span>\n  )\n}\n","import { Layer, StateActions, AppState } from './state'\nimport { Dispatch } from 'redux'\nimport {\n  ListBox,\n  Item,\n  View,\n  Divider,\n  Heading,\n  Flex,\n  ProgressCircle,\n} from '@adobe/react-spectrum'\nimport React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { LayoutBar } from './App'\nimport { Detail } from './Spectrum'\n\nfunction reverse(a: Array<any>) {\n  const z = []\n  let idx = 0\n  for (let x = a.length - 1; x >= 0; x--) {\n    z[idx++] = a[x]\n  }\n  return z\n}\n\ntype ListBoxItemProps = {\n  layers: Layer[]\n  selected: number\n  dispatch: Dispatch<any>\n  index: number\n  title: string\n}\n\nfunction ListBoxItem({\n  title,\n  layers,\n  index,\n  selected,\n  dispatch,\n}: ListBoxItemProps) {\n  return (\n    <ListBox\n      selectedKeys={+selected === +index ? 'all' : []}\n      selectionMode=\"single\"\n      aria-label={title}\n      onSelectionChange={(keys) => {\n        const k = Array.from(keys)\n        if (k.length === 0) {\n          return\n        }\n        if (k[0] >= layers.length) {\n          return\n        }\n        dispatch(StateActions.setCurrentLayer(k[0] as number))\n      }}\n    >\n      <Item key={+index}>{title}</Item>\n    </ListBox>\n  )\n}\n\nfunction LayerList({ layers }: { layers: Layer[] }) {\n  const dispatch = useDispatch()\n  const selected = useSelector((state: AppState) => state.currentLayer)\n\n  return (\n    <View>\n      <ListBox\n        selectedKeys={+selected === -1 ? 'all' : []}\n        selectionMode=\"single\"\n        aria-label={'Merged'}\n        onSelectionChange={() => {\n          dispatch(StateActions.setCurrentLayer(-1))\n        }}\n      >\n        <Item key={232}>Merged</Item>\n      </ListBox>\n      <Divider key=\"div\" size=\"S\" />\n      {reverse(\n        layers.map((layer, index) => (\n          <ListBoxItem\n            key={layer.hashCode}\n            dispatch={dispatch}\n            title={layer.name}\n            layers={layers}\n            index={index}\n            selected={selected}\n          />\n        ))\n      )}\n    </View>\n  )\n}\n\nexport function LayerListSection() {\n  const layers = useSelector((state: AppState) => state.layers)\n  return (\n    <LayoutBar /* key={`bar:${fileIndex}`} */>\n      <View>\n        <Heading>Layers</Heading>\n        {!layers || layers.length === 0 ? (\n          <Flex justifyContent=\"center\">\n            <ProgressCircle aria-label=\"Loading…\" isIndeterminate />\n          </Flex>\n        ) : (\n          <LayerList layers={layers} />\n        )}\n      </View>\n    </LayoutBar>\n  )\n}\n","import {\n  View,\n  Header,\n  Flex,\n  Heading,\n  Content,\n  ButtonGroup,\n  Button,\n  ActionButton,\n} from '@adobe/react-spectrum'\nimport React, { useEffect, useRef, useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport { AppState } from './state'\nimport Download from '@spectrum-icons/workflow/Download'\nimport { imageViewId } from './ImageView'\nimport { saveAs } from 'file-saver'\nimport { Tooltip, TooltipDirection, TooltipStyle } from './Spectrum'\n\nfunction Filename() {\n  const name = useSelector((state: AppState) => state.filename)\n  return (\n    <Content>\n      <b>{name}</b>\n    </Content>\n  )\n}\n\nfunction SaveLayerButton() {\n  let canvas = useRef(\n    document.getElementById(imageViewId) as HTMLCanvasElement | null\n  )\n  const currentLayerName = useSelector((state: AppState) => {\n    try {\n      return state.layers[state.currentLayer].name\n    } catch (_) {\n      return 'layer'\n    }\n  })\n  const imageData = useSelector((state: AppState) => {\n    try {\n      return state.currentLayer === -1\n        ? state.mergedImage.imageData\n        : state.layers[state.currentLayer].layerImage\n    } catch (_) {\n      return null\n    }\n  })\n\n  useEffect(() => {\n    canvas.current = document.getElementById(\n      imageViewId\n    ) as HTMLCanvasElement | null\n  }, [currentLayerName])\n\n  return (\n    <ActionButton\n      aria-labelledby=\"Save\"\n      isDisabled={!canvas || !imageData}\n      onPress={() => {\n        // draw to canvas...\n        canvas.current?.toBlob(function (blob) {\n          if (blob) {\n            saveAs(blob, `${currentLayerName}.png`)\n          }\n        })\n      }}\n      isQuiet\n    >\n      <Download />\n    </ActionButton>\n  )\n}\n\nexport function AppHeader() {\n  return (\n    <View\n      backgroundColor=\"gray-50\"\n      paddingStart=\"size-300\"\n      paddingEnd=\"size-250\"\n      zIndex={3}\n    >\n      <Header height={'size-700'}>\n        <Flex direction=\"row\" justifyContent=\"space-between\">\n          <Heading>PSD Inspect</Heading>\n          <View alignSelf=\"center\">\n            <Filename />\n          </View>\n          <View alignSelf=\"center\">\n            {/*\n            <Button variant=\"primary\" marginEnd=\"size-250\">\n              Upload File\n            </Button>\n            */}\n            <SaveLayerButton />\n          </View>\n        </Flex>\n      </Header>\n    </View>\n  )\n}\n","import React, { useEffect, useState, useRef } from 'react'\nimport {\n  Provider as ReduxProvider,\n  useSelector,\n  useDispatch,\n} from 'react-redux'\nimport {\n  Provider,\n  defaultTheme,\n  View,\n  Flex,\n  Heading,\n  Divider,\n  DialogTrigger,\n  AlertDialog,\n  Content,\n  ProgressCircle,\n  Button,\n  Text,\n  ListBox,\n  Item,\n  Section,\n  Header,\n} from '@adobe/react-spectrum'\nimport { useWindowSize } from './hooks'\nimport { createStore, Dispatch } from 'redux'\nimport {\n  rootReducer,\n  AppState,\n  StateActions,\n  PsdImportData,\n  Layer,\n} from './state'\nimport { ImageView } from './ImageView'\nimport {\n  loadDocumentIntoReduxState,\n  loadLayerMaskSection,\n  loadMergedImage,\n  loadDefaultSample,\n} from './file-loading'\nimport Book from '@spectrum-icons/workflow/Book'\nimport Draw from '@spectrum-icons/workflow/Draw'\nimport BulkEditUsers from '@spectrum-icons/workflow/BulkEditUsers'\nimport { LayerListSection } from './LayerList'\nimport { getDocumentInfo } from './psd-interface'\nimport { Detail, Code, ToCssColorType } from './Spectrum'\nimport { AppHeader } from './Header'\n\nfunction LayerMetadata() {\n  const filename = useSelector((state: AppState) => state.filename)\n  const importData = useSelector((state: AppState) => state.importData)\n\n  if (!importData || !importData.document) {\n    return null\n  }\n\n  const info = getDocumentInfo(importData.document)\n  const meta = [\n    ['File Name', filename],\n    ['Width', info.width],\n    ['Height', info.height],\n    ['Channel Count', info.channelCount],\n    ['Bits per Channel', info.bitsPerChannel],\n    ['Color Mode', info.colorMode],\n  ]\n\n  return (\n    <View>\n      <LayoutBar>\n        <Heading>Document Info</Heading>\n        <>\n          {meta.map((v) => (\n            <Flex key={v[0]} direction=\"row\">\n              <Content width=\"size-1700\">\n                <span style={{ color: ToCssColorType('gray-700') }}>\n                  {`${v[0]}`.toLowerCase()}\n                </span>\n              </Content>\n              <Code>{v[1]}</Code>\n            </Flex>\n          ))}\n        </>\n      </LayoutBar>\n    </View>\n  )\n}\n\nexport function LayoutBar({\n  children,\n}: {\n  children?: JSX.Element | JSX.Element[]\n}) {\n  return (\n    <View\n      backgroundColor=\"gray-50\"\n      zIndex={2}\n      width=\"size-3000\"\n      paddingStart=\"size-300\"\n      paddingEnd=\"size-300\"\n      paddingTop=\"size-50\"\n    >\n      {children}\n    </View>\n  )\n}\n\nfunction useFileLoadingState() {\n  const dispatch = useDispatch()\n  const fileIndex = useSelector((state: AppState) => state.fileIndex)\n  const importData = useSelector((state: AppState) => state.importData)\n\n  useEffect(() => {\n    loadDefaultSample().then((value) => {\n      loadDocumentIntoReduxState(dispatch, 'sample.psd', value)\n    })\n  }, [])\n\n  // file index is changed\n  useEffect(() => {\n    if (!importData) {\n      return\n    }\n    // first of all dump layers\n    dispatch(StateActions.dumpLayers())\n    // async function to parse layer mask section\n    loadLayerMaskSection(importData, dispatch).catch((errors) => {\n      console.log(errors)\n    })\n\n    loadMergedImage(importData, dispatch).catch((err) => {\n      console.log(err)\n    })\n\n    // on error show the alert\n  }, [fileIndex])\n  return fileIndex\n}\n\nfunction Layout() {\n  const _ = useFileLoadingState()\n  const { height } = useWindowSize()\n\n  return (\n    <View overflow=\"hidden\">\n      <Flex direction=\"column\">\n        <AppHeader />\n\n        <Flex direction=\"row\">\n          <ImageView />\n          <View backgroundColor=\"gray-50\" zIndex={2}>\n            <Flex direction=\"row\">\n              <LayerMetadata />\n              <Divider\n                marginTop=\"size-250\"\n                marginBottom=\"size-250\"\n                orientation=\"vertical\"\n                size=\"S\"\n              />\n              <LayerListSection />\n            </Flex>\n          </View>\n        </Flex>\n      </Flex>\n    </View>\n  )\n}\nfunction App() {\n  const store = createStore(rootReducer)\n  return (\n    <ReduxProvider store={store}>\n      <Provider colorScheme=\"light\" theme={defaultTheme}>\n        <Layout />\n      </Provider>\n    </ReduxProvider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './default/serviceWorker'\nimport './default/index.css'\n\nimport '@spectrum-css/vars/dist/spectrum-global.css'\nimport '@spectrum-css/vars/dist/spectrum-medium.css'\nimport '@spectrum-css/vars/dist/spectrum-light.css'\nimport '@spectrum-css/typography/dist/index.css'\nimport '@spectrum-css/tooltip/dist/index.css'\n\ndocument.documentElement.classList.add(\n  'spectrum',\n  'spectrum--medium',\n  'spectrum--light'\n)\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}